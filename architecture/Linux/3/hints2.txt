Задания, которые вы описали, могут требовать использования различных инструментов Linux, а не только AWK, так как AWK не всегда самодостаточен для выполнения подобных операций. Однако, я поделюсь с вами примерами того, как можно использовать AWK в сочетании с другими командами для выполнения указанных задач, где это возможно.

1. Вывести на экран день недели и текущее число из calendar.txt:
   bash
   awk -v day="$(date "+%d")" -v month="$(date "+%B")" '
   BEGIN {
     FS = " ";
     months = "января февраля марта апреля мая июня июля августа сентября октября ноября декабря";
     split(months, monthnames, " ");
   }
   {
     for (i = 1; i <= NF; i++) {
       if ($i == day) {
         printf "сегодня %s %d %s\n", $0, day, monthnames[month];
       }
     }
   }' calendar.txt
   

2. Вывести список каталогов, имена которых состоят из русских букв:
   bash
   ls -l | awk '/^d/ && $9 ~ /^[А-Яа-я]+$/ { print $9 }'
   

3. Определить количество байтов, занятых текстовыми файлами:
   bash
   find . -type f -name "*.txt" -print0 | xargs -0 ls -l | awk '{total += $5} END {print total}'
   

4. Определить количество блоков, содержащих текущий каталог:
   bash
   df . | awk 'NR==2 {print $2}'
   

5. Изменить права доступа и сортировать по правам доступа:
   bash
   chmod 644 some_files_pattern
   ls -l | sort -k1,1
   

6. Напечатать список каталогов с data*.txt:
   bash
   find . -type f -name "data*.txt" | awk 'BEGIN {FS="/"} {print $(NF-1)}' | sort -u
   

7. Подсчитать, сколько раз пользователь входил в систему:
   bash
   last | awk -v user="$USER" '$1==user {++cnt} END {print cnt}'
   

8. Напечатать список пользователей, отсортированный по времени:
   bash
   last | awk '{print $1, $4, $5, $6, $7}' | sort -k4,4
   

Пожалуйста, имейте в виду, что AWK может быть использован для фильтрации и форматирования вывода команд, но некоторые из заданий требуют использования других утилит для извлечения информации или для манипуляции с файлами и каталогами. Для выполнения заданий 3-5, 7 и 8 AWK работает в сочетании с другими командами для достижения желаемого результата.

Context: [ p:3057 c:824 t:3881 ]

© GPT-4 Turbo


Использование команды awk для изменения прав доступа к файлам напрямую невозможно, так как awk предназначен только для обработки и анализа текстовых данных. Однако, можно сочетать awk с командой chmod в целях изменения прав доступа к файлам.

Допустим, мы хотим изменить права доступа всех .txt файлов в текущем каталоге на 644, а затем вывести список файлов, отсортированный по их правам доступа. Вот пример скрипта командной строки, который это делает:

bash
# Найти все .txt файлы и изменить их права доступа на 644
find . -type f -name "*.txt" -exec chmod 644 {} \;

# Отображение отсортированного списка файлов по правам доступа
ls -l | awk '{print $1, $9}' | sort


В вышеприведенном коде используется find для поиска .txt файлов и изменения прав на 644 при помощи chmod, а затем ls -l в сочетании с awk для печати прав доступа и имени файла и sort для сортировки списка.

Обратите внимание, что chmod — это команда для изменения прав доступа, и использование awk в данном случае ограничивается только отображением информации и её сортировкой. Само изменение прав доступа выполняется с помощью chmod.

Context: [ p:3901 c:406 t:4307 ]

© GPT-4 Turbo


last | awk -v user="$USER" '{if ($1 == user) count++} END {print count}'